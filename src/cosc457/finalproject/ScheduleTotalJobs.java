/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package cosc457.finalproject;

//import from jars
import static cosc457.finalproject.Login.userName;
import org.apache.commons.io.FileExistsException;
import org.apache.commons.io.FileUtils;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.*;
import java.io.*;
import java.sql.*;
import java.util.*;

/**
 *
 * @author Kevin
 */
public class ScheduleTotalJobs extends javax.swing.JFrame {

    static final String userName = "jrajew1";//put your MySQL user name
    static final String password = "Cosc*2awc";//put your MySQL password
    Connect connect = new Connect();
    //private PreparedStatement stmt;
    //private ResultSet res2;
    //private Connection conn;

    /**
     * Creates new form ScheduleTotalJobs
     */
    public ScheduleTotalJobs() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        jButton10 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        jLabel1.setText("Schedule of Total Jobs");

        jButton1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jButton1.setText("Cabinet Installs");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jButton2.setText("Back");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jButton3.setText("DropOff/Pick Up");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jButton4.setText("Job Installs");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jButton5.setText("Granite-Quartz Installs");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jButton6.setText("Granite-Quartz Repairs");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton7.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jButton7.setText("Job Repairs");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jButton8.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jButton8.setText("Solid Surfaces Install");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        jButton9.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jButton9.setText("Solid Surfaces Repair");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        jButton10.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jButton10.setText("Tile Count");
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton10, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jButton8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jButton9, javax.swing.GroupLayout.DEFAULT_SIZE, 222, Short.MAX_VALUE)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, 221, Short.MAX_VALUE)
                                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 100, Short.MAX_VALUE)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(50, 50, 50))))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(59, 59, 59)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(107, 107, 107)
                        .addComponent(jLabel1)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton6)
                    .addComponent(jButton1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton7)
                    .addComponent(jButton3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton4)
                    .addComponent(jButton8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton5)
                    .addComponent(jButton9))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 23, Short.MAX_VALUE)
                .addComponent(jButton2)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        new Reports().setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        //cabniets NEW

        try {
            connect.ps = null;
            String query1 = "SELECT count(JobName) \n"
                    + "FROM (SELECT JobName \n"
                    + "		FROM Job\n"
                    + "		WHERE year(Date)=2017 AND month(Date)=5 AND \n"
                    + "        ((Cabinet=1))) U;";
            connect.res = connect.stat.executeQuery(query1);

            Workbook wb = new HSSFWorkbook();
            Sheet personSheet = wb.createSheet("TEST");
            Row headerRow = personSheet.createRow(0);
            Cell nameHeaderCell = headerRow.createCell(0);
            Cell addressHeaderCell = headerRow.createCell(1);

            int row = 1;
            int row2=0;
            Row dataRow2 = personSheet.createRow(row2);
            Cell dataQuoteCell2 = dataRow2.createCell(0);
            dataQuoteCell2.setCellValue("#ofCabnietInstalls");
            while (connect.res.next()) {

                Row dataRow = personSheet.createRow(row);

                Cell dataNameCell = dataRow.createCell(0);
                dataNameCell.setCellValue(connect.res.getString("count(JobName)"));
                row = row + 1;
            }

            FileOutputStream fileOut = new FileOutputStream(new File("CabnietInstalls"));
            wb.write(fileOut);
            fileOut.close();
            System.out.println("done");

        } catch (Exception e) {
            //e.printStackTrace();
            System.out.println("errorz");
            //System.out.println(e);
        }


    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        //dropoff pick up
        try {
            connect.ps = null;
            String query1 = "SELECT count(JobName) \n"
                    + "FROM (SELECT JobName \n"
                    + "		FROM Job\n"
                    + "		WHERE year(Date)=2017 AND month(Date)=5 AND \n"
                    + "        ((`Dropoff/Pickups`=1))) U;";
            connect.res = connect.stat.executeQuery(query1);

            Workbook wb = new HSSFWorkbook();
            Sheet personSheet = wb.createSheet("TEST");
            Row headerRow = personSheet.createRow(0);
            Cell nameHeaderCell = headerRow.createCell(0);
            Cell addressHeaderCell = headerRow.createCell(1);

            int row = 1;
            int row2=0;
            Row dataRow2 = personSheet.createRow(row2);
            Cell dataQuoteCell2 = dataRow2.createCell(0);
            dataQuoteCell2.setCellValue("#ofDropOffPickUp");
            while (connect.res.next()) {

                Row dataRow = personSheet.createRow(row);

             
                Cell dataNameCell = dataRow.createCell(0);
                dataNameCell.setCellValue(connect.res.getString("count(JobName)"));
                row = row + 1;
            }

            FileOutputStream fileOut = new FileOutputStream(new File("DropOffPickUp"));
            wb.write(fileOut);
            fileOut.close();
            System.out.println("done");

        } catch (Exception e) {
            //e.printStackTrace();
            System.out.println("errorz");
            //System.out.println(e);
        }

    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed

        //job installs
        try {
            connect.ps = null;
            String query1 = "SELECT count(JobName) \n"
                    + "FROM (SELECT JobName \n"
                    + "		FROM Job\n"
                    + "		WHERE year(Date)=2017 AND month(Date)=5 AND \n"
                    + "        ((`Dropoff/Pickups`=0) or (SolidSurfaces_Repair=0)\n"
                    + "        or (`Granite/Quartz_Repair`=0))) U;";
            connect.res = connect.stat.executeQuery(query1);

            Workbook wb = new HSSFWorkbook();
            Sheet personSheet = wb.createSheet("TEST");
            Row headerRow = personSheet.createRow(0);
            Cell nameHeaderCell = headerRow.createCell(0);
            Cell addressHeaderCell = headerRow.createCell(1);

            int row = 1;
            int row2=0;
            Row dataRow2 = personSheet.createRow(row2);
            Cell dataQuoteCell2 = dataRow2.createCell(0);
            dataQuoteCell2.setCellValue("#ofJobInstalls");
            while (connect.res.next()) {

                Row dataRow = personSheet.createRow(row);

            
                Cell dataNameCell = dataRow.createCell(0);
                dataNameCell.setCellValue(connect.res.getString("count(JobName)"));
                row = row + 1;
            }

            FileOutputStream fileOut = new FileOutputStream(new File("JobInstalls"));
            wb.write(fileOut);
            fileOut.close();
            System.out.println("done");

        } catch (Exception e) {
            //e.printStackTrace();
            System.out.println("errorz");
            //System.out.println(e);
        }

    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        //granite-quartz install
        try {
            connect.ps = null;
            String query1 = "SELECT count(JobName) \n"
                    + "FROM (SELECT JobName \n"
                    + "		FROM Job\n"
                    + "		WHERE year(Date)=2017 AND month(Date)=5 AND \n"
                    + "        ((`Granite/Quartz`=1))) U;";
            connect.res = connect.stat.executeQuery(query1);

            Workbook wb = new HSSFWorkbook();
            Sheet personSheet = wb.createSheet("TEST");
            Row headerRow = personSheet.createRow(0);
            Cell nameHeaderCell = headerRow.createCell(0);
            Cell addressHeaderCell = headerRow.createCell(1);

            int row = 1;
             int row2=0;
            Row dataRow2 = personSheet.createRow(row2);
            Cell dataQuoteCell2 = dataRow2.createCell(0);
            dataQuoteCell2.setCellValue("#ofGraniteQuartzInstall");
            while (connect.res.next()) {

                Row dataRow = personSheet.createRow(row);

                
                Cell dataNameCell = dataRow.createCell(0);
                dataNameCell.setCellValue(connect.res.getString("count(JobName)"));
                row = row + 1;
            }

            FileOutputStream fileOut = new FileOutputStream(new File("GraniteQuartzInstall"));
            wb.write(fileOut);
            fileOut.close();
            System.out.println("done");

        } catch (Exception e) {
            //e.printStackTrace();
            System.out.println("errorz");
            //System.out.println(e);
        }

    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed

        //granit-quartz repair
        try {
            connect.ps = null;
            String query1 = "SELECT count(JobName) \n"
                    + "FROM (SELECT JobName \n"
                    + "		FROM Job\n"
                    + "		WHERE year(Date)=2017 AND month(Date)=5 AND \n"
                    + "        ((`Granite/Quartz_Repair`=1))) U;";
            connect.res = connect.stat.executeQuery(query1);

            Workbook wb = new HSSFWorkbook();
            Sheet personSheet = wb.createSheet("TEST");
            Row headerRow = personSheet.createRow(0);
            Cell nameHeaderCell = headerRow.createCell(0);
            Cell addressHeaderCell = headerRow.createCell(1);

            int row = 1;
              int row2=0;
            Row dataRow2 = personSheet.createRow(row2);
            Cell dataQuoteCell2 = dataRow2.createCell(0);
            dataQuoteCell2.setCellValue("#ofGranitQuartzRepair");
            while (connect.res.next()) {

                Row dataRow = personSheet.createRow(row);

               
                Cell dataNameCell = dataRow.createCell(0);
                dataNameCell.setCellValue(connect.res.getString("count(JobName)"));
                row = row + 1;
            }

            FileOutputStream fileOut = new FileOutputStream(new File("GranitQuartzRepair"));
            wb.write(fileOut);
            fileOut.close();
            System.out.println("done");

        } catch (Exception e) {
            //e.printStackTrace();
            System.out.println("errorz");
            //System.out.println(e);
        }


    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed

        //job repairs
        try {
            connect.ps = null;
            String query1 = "SELECT count(JobName) \n"
                    + "FROM (SELECT JobName \n"
                    + "		FROM Job\n"
                    + "		WHERE year(Date)=2017 AND month(Date)=5 AND \n"
                    + "        ((SolidSurfaces_Repair=1) or (`Granite/Quartz_Repair`=1))) U;";
            connect.res = connect.stat.executeQuery(query1);

            Workbook wb = new HSSFWorkbook();
            Sheet personSheet = wb.createSheet("TEST");
            Row headerRow = personSheet.createRow(0);
            Cell nameHeaderCell = headerRow.createCell(0);
            Cell addressHeaderCell = headerRow.createCell(1);

            int row = 1;
              int row2=0;
            Row dataRow2 = personSheet.createRow(row2);
            Cell dataQuoteCell2 = dataRow2.createCell(0);
            dataQuoteCell2.setCellValue("#ofJobRepairs");
            while (connect.res.next()) {

                Row dataRow = personSheet.createRow(row);

              
                Cell dataNameCell = dataRow.createCell(0);
                dataNameCell.setCellValue(connect.res.getString("count(JobName)"));
                row = row + 1;
            }

            FileOutputStream fileOut = new FileOutputStream(new File("JobRepairs"));
            wb.write(fileOut);
            fileOut.close();
            System.out.println("done");

        } catch (Exception e) {
            //e.printStackTrace();
            System.out.println("errorz");
            //System.out.println(e);
        }

    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed

        //solid surfaces install
        try {
            connect.ps = null;
            String query1 = "SELECT count(JobName) \n"
                    + "FROM (SELECT JobName \n"
                    + "		FROM Job\n"
                    + "		WHERE year(Date)=2017 AND month(Date)=5 AND \n"
                    + "        ((SolidSurfaces=1))) U;";
            connect.res = connect.stat.executeQuery(query1);

            Workbook wb = new HSSFWorkbook();
            Sheet personSheet = wb.createSheet("TEST");
            Row headerRow = personSheet.createRow(0);
            Cell nameHeaderCell = headerRow.createCell(0);
            Cell addressHeaderCell = headerRow.createCell(1);

            int row = 1;
             int row2=0;
            Row dataRow2 = personSheet.createRow(row2);
            Cell dataQuoteCell2 = dataRow2.createCell(0);
            dataQuoteCell2.setCellValue("#ofSolidSurfacesInstall");
            while (connect.res.next()) {

                Row dataRow = personSheet.createRow(row);

         
                Cell dataNameCell = dataRow.createCell(0);
                dataNameCell.setCellValue(connect.res.getString("count(JobName)"));
                row = row + 1;
            }

            FileOutputStream fileOut = new FileOutputStream(new File("SolidSurfacesInstall"));
            wb.write(fileOut);
            fileOut.close();
            System.out.println("done");

        } catch (Exception e) {
            //e.printStackTrace();
            System.out.println("errorz");
            //System.out.println(e);
        }

    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed

        //solid surfaces repair
        try {
            connect.ps = null;
            String query1 = "SELECT count(JobName) \n"
                    + "FROM (SELECT JobName \n"
                    + "		FROM Job\n"
                    + "		WHERE year(Date)=2017 AND month(Date)=5 AND \n"
                    + "        ((SolidSurfaces_Repair=1))) U;";
            connect.res = connect.stat.executeQuery(query1);

            Workbook wb = new HSSFWorkbook();
            Sheet personSheet = wb.createSheet("TEST");
            Row headerRow = personSheet.createRow(0);
            Cell nameHeaderCell = headerRow.createCell(0);
            Cell addressHeaderCell = headerRow.createCell(1);

            int row = 1;
            int row2=0;
            Row dataRow2 = personSheet.createRow(row2);
            Cell dataQuoteCell2 = dataRow2.createCell(0);
            dataQuoteCell2.setCellValue("#ofSolidSurfacesRepair");
            while (connect.res.next()) {

                Row dataRow = personSheet.createRow(row);

           
                Cell dataNameCell = dataRow.createCell(0);
                dataNameCell.setCellValue(connect.res.getString("count(JobName)"));
                row = row + 1;
            }

            FileOutputStream fileOut = new FileOutputStream(new File("SolidSurfacesRepair"));
            wb.write(fileOut);
            fileOut.close();
            System.out.println("done");

        } catch (Exception e) {
            //e.printStackTrace();
            System.out.println("errorz");
            //System.out.println(e);
        }
    }//GEN-LAST:event_jButton9ActionPerformed

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed

        //tile count
        try {
            connect.ps = null;
            String query1 = "SELECT count(JobName) \n"
                    + "FROM (SELECT JobName \n"
                    + "		FROM Job\n"
                    + "		WHERE year(Date)=2017 AND month(Date)=5 AND \n"
                    + "        ((Tile=1))) U;";
            connect.res = connect.stat.executeQuery(query1);

            Workbook wb = new HSSFWorkbook();
            Sheet personSheet = wb.createSheet("TEST");
            Row headerRow = personSheet.createRow(0);
            Cell nameHeaderCell = headerRow.createCell(0);
            Cell addressHeaderCell = headerRow.createCell(1);

            int row = 1;
              int row2=0;
            Row dataRow2 = personSheet.createRow(row2);
            Cell dataQuoteCell2 = dataRow2.createCell(0);
            dataQuoteCell2.setCellValue("#ofTiles");
            while (connect.res.next()) {

                Row dataRow = personSheet.createRow(row);

          
                Cell dataNameCell = dataRow.createCell(0);
                dataNameCell.setCellValue(connect.res.getString("count(JobName)"));
                row = row + 1;
            }

            FileOutputStream fileOut = new FileOutputStream(new File("TileCount"));
            wb.write(fileOut);
            fileOut.close();
            System.out.println("done");

        } catch (Exception e) {
            //e.printStackTrace();
            System.out.println("errorz");
            //System.out.println(e);
        }
    }//GEN-LAST:event_jButton10ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ScheduleTotalJobs.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ScheduleTotalJobs.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ScheduleTotalJobs.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ScheduleTotalJobs.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ScheduleTotalJobs().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables
}

/*

 Workbook wb = new HSSFWorkbook();
        Sheet personSheet = wb.createSheet("TEST");
        Row headerRow = personSheet.createRow(0);
        Cell nameHeaderCell = headerRow.createCell(0);
        Cell addressHeaderCell = headerRow.createCell(1);

        String sql = "select * from jrajew1db.Customer;"; 
        //String sql = "select CustomerNo, RevenueAmount from jrajew1db.CustomerRevenue where Year= ?;";
        //sql.setString(1,Year);
        PreparedStatement ps = connection.prepareStatement(sql);
        ResultSet resultSet = ps.executeQuery();
        //ps.setObject(1, Year);
        
        int row = 1;
        while (resultSet.next()) {
            String name = resultSet.getString("Customer#");
            String address = resultSet.getString("Name");

            Row dataRow = personSheet.createRow(row);

            Cell dataNameCell = dataRow.createCell(0);
            dataNameCell.setCellValue(name);

            Cell dataAddressCell = dataRow.createCell(1);
            dataAddressCell.setCellValue(address);

            row = row + 1;
        }
        FileOutputStream fileOut = new FileOutputStream(new File("pee"));
        wb.write(fileOut);
        fileOut.close();
       System.out.println("done");
        //querys = "UPDATE csuchi1db.P SET pname = 'Test' WHERE pname = 'Nut';";
        //updateP = connection.prepareStatement(querys);
        //updateP.executeUpdate();



//**************************************
//all was in action method
//**************************************
//cabniets
        // TODO add your handling code here:
        //generate report
        //SELECT count(JobName) FROM (SELECT JobName FROM jrajew1db.Job WHERE 
        //year(Date)=2017 AND month(Date)=5 AND ((Cabinet=1))) U;
        try{
        //String sql = "SELECT count(JobName) FROM (SELECT JobName FROM jrajew1db.Job WHERE year(Date)=2017 AND month(Date)=5 AND ((Cabinet=1))) U; ";
        
        Object newInstance;
        newInstance = Class.forName("com.mysql.jdbc.Driver").newInstance();
        connection = DriverManager.getConnection("jdbc:mysql://triton.towson.edu:3360/jrajew1db", userName, password);
        PreparedStatement updateP;
        Statement queryStatement = connection.createStatement();
        updateP = null;
       
        
        Workbook wb = new HSSFWorkbook();
        Sheet personSheet = wb.createSheet("TEST1");
        Row headerRow = personSheet.createRow(0);
        Cell nameHeaderCell = headerRow.createCell(0);
        Cell addressHeaderCell = headerRow.createCell(1);

        String sql1 = "select count(JobName) from (select JobName from jrajew1db.Job where year(Date)=2017 and month(Date)=5 and ((Cabinet=1))) U; ";
        //String sql2 = "select count(JobName) from (select JobName from jrajew1db.Job where year(Date) =2017 and month(Date)=5 and ((`Dropoff/Pickups`=0) or (SolidSurfaces_Repair=0) or (`Granite/Quartz_Repair`=0))) U;";
        PreparedStatement ps = connection.prepareStatement(sql1);
        ResultSet resultSet = ps.executeQuery();
        
        int row = 1;
        while (resultSet.next()) {
            String name = resultSet.getString("count(JobName)");
            //String address = resultSet.getString("Name");

            Row dataRow = personSheet.createRow(row);

            Cell dataNameCell = dataRow.createCell(0);
            dataNameCell.setCellValue(name);

            //Cell dataAddressCell = dataRow.createCell(1);
            //dataAddressCell.setCellValue(address);

            row = row + 1;
        }
        
         
        FileOutputStream fileOut = new FileOutputStream(new File("Cabniet Installs"));
        wb.write(fileOut);
        fileOut.close();
       System.out.println("done");
        
        
        }
        catch(SQLException e){
            System.out.println("error1");
        }
        catch(FileNotFoundException c){
            System.out.println("error2");
        }
        catch(IOException c){
            System.out.println("error3");
        }
        catch(ClassNotFoundException r){
            System.out.println("error4");
        }
        catch(InstantiationException p){
            System.out.println("error5");
        }
        catch(IllegalAccessException t){
            System.out.println("error6");
        }

 */
